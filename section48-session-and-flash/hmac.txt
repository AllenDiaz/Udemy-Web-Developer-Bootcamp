# **HMAC in Express.js**

## **Overview**

HMAC is a cryptographic technique used to verify the integrity and authenticity of messages. In Express.js, HMAC is commonly used for securing API requests, especially in webhook authentication.

## **Installation**

To use HMAC in Express.js, install the `crypto` module (built into Node.js):

```jsx
const crypto = require("crypto");

```

## **Generating an HMAC Signature**

You can generate an HMAC signature using a secret key:

```jsx
function generateHMAC(message, secretKey) {
    return crypto.createHmac("sha256", secretKey)
                 .update(message)
                 .digest("hex");
}

// Example usage
const secretKey = "your_secret_key";
const message = "Hello, HMAC!";
const signature = generateHMAC(message, secretKey);
console.log("Generated HMAC:", signature);

```

## **Verifying an HMAC Signature in Express**

To authenticate incoming requests using HMAC:

```jsx
const express = require("express");
const app = express();

app.use(express.json());

const secretKey = "your_secret_key";

app.post("/webhook", (req, res) => {
    const receivedSignature = req.headers["x-signature"];
    const computedSignature = generateHMAC(JSON.stringify(req.body), secretKey);

    if (receivedSignature === computedSignature) {
        res.status(200).send("Valid request");
    } else {
        res.status(401).send("Invalid signature");
    }
});

function generateHMAC(message, secretKey) {
    return crypto.createHmac("sha256", secretKey)
                 .update(message)
                 .digest("hex");
}

```

## **Security Considerations**

- Use **secure headers** (e.g., `X-Signature`) to transmit HMAC values.
- Ensure **secret keys** are stored securely (e.g., environment variables).
- Use **timing-safe comparison** to prevent timing attacks.

## **Common Use Cases**

- Webhook authentication (e.g., Stripe, GitHub)
- API request validation
- Secure message integrity verification